# -*- coding: utf-8 -*-
"""MYFIRSTNUERALNETWORK1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gQQoHAwcot-Mk6P2UZ5Rrm6xSZiIASSC
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

#create a model class that inherits nn module
class Model(nn.Module):
  #input layer(4 features of the flower)-->
  #hidden layer h1 (number of nuerons)-->
  #hidden layer h2(number of nuerons)-->
  #output(3 classes of iris flowers)
  def __init__(self,in_features=4,h1=8,h2=8,out_features=3):
    super().__init__()
    self.fc1=nn.Linear(in_features,h1)#fc=fully connected
    self.fc1=nn.Linear(h1,h2)#moving from h1 to h2
    self.out=nn.Linear(h2,out_features)
  #creating a function to move forward(forward propagation)
  def forward(self,x):
    x=F.relu(self.fc1(x))#relu stands for rectified linear unit,it computation checks if op is less than 0 if so leaves it else uses it for further compute
    x=F.relu(self.fc2(x))#second layer
    x=self.out(x)
    return x

#pick a manual seed for randomization
torch.manual_seed(50)
model=Model()